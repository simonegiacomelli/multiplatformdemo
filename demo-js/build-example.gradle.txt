/*
https://github.com/Kotlin/kotlinx.serialization/blob/master/example-js/build.gradle
 */

version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.40'
    ext.serialization_version = '0.5.0'
    ext.web_path = 'web'

    repositories {
        jcenter()
        mavenLocal()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:$serialization_version"
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'kotlinx-serialization'

repositories {
    jcenter()
    mavenLocal()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
}

compileKotlin2Js {
    kotlinOptions.outputFile = "${projectDir}/$web_path/output.js"
    kotlinOptions.moduleKind = "amd"
    kotlinOptions.sourceMap = true
}

clean {
    delete new File("${projectDir}/$web_path")
}

build.doLast {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${projectDir}/$web_path"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

    copy {
        from sourceSets.main.resources.srcDirs
        into "${projectDir}/$web_path"
    }
}
